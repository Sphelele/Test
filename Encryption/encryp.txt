using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the encryption function below.
    static string encryption(string s) {
        
        int lenght = 0;
        int index = 0;
        bool flag = false;
        
        //int space = 0;
        lenght = s.Length;
        if(Math.Sqrt(lenght)%2 >= 1)
        {
            flag = true;
        }
        lenght = (int)Math.Sqrt(lenght);
        int row = lenght;
         int col = lenght;
        if (flag == true)
           col++;
        
        char[,] array = new char[row, col];
        char[] temp = s.ToCharArray();
        
        string result = "";
        for(int r = 0; r < row; r++){
            for(int c = 0; c < col; c++){
                if(temp[index] == '\0')
                    array[r,c] = '\0';
                else
                    array[r,c] = temp[index];
                Console.Write(temp[index]);
                index++;
            }
            Console.Write("\n");
           //space = r; 
        }       
        
        //index = 0;
         for(int r = 0; r < col; r++){
            for(int c = 0; c < row; c++){
                if (array[c,r] == '\0')
                    break;
                result += array[c,r];
                //index++;
            }
             result += ' ';
        }
        return result;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string s = Console.ReadLine();

        string result = encryption(s);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
